[("\\foo",
  (Shallow_decl_defs.Fun
     { Typing_defs.fe_deprecated = None;
       fe_type =
       (Rwitness (root|wildcard_invalid.php line 3, characters 10-12),
        (Tfun
           { ft_arity = (Fstandard ()); ft_tparams = [];
             ft_where_constraints = [];
             ft_params =
             [{ fp_pos = [3:16-18]; fp_name = (Some "$x");
                fp_type =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|wildcard_invalid.php line 3, characters 14-14),
                   Terr)
                  };
                fp_rx_annotation = None;
                fp_flags =
                (make_fp_flags ~mutability:None ~accept_disposable:false
                  ~has_default:false ~mode:Typing_defs_core.FPnormal
                  ~ifc_external:false ~ifc_can_call:false ~is_atom:false
                  ~readonly:false);
                 }
               ];
             ft_implicit_params = { capability = (CapDefaults [3:10-13]) };
             ft_ret =
             { et_enforced = false;
               et_type =
               (Rhint (root|wildcard_invalid.php line 3, characters 21-24),
                (Tprim Tvoid))
               };
             ft_flags =
             (make_ft_flags FSync None ~return_disposable:false
               ~returns_mutable:false ~returns_void_to_rx:false
               ~returns_readonly:false ~readonly_this:false);
             ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
       fe_pos = [3:10-13]; fe_php_std_lib = false }));
  ("\\bar",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|wildcard_invalid.php line 6, characters 10-12),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [6:20-22]; fp_name = (Some "$x");
                 fp_type =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|wildcard_invalid.php line 6, characters 14-18),
                    Tmixed)
                   };
                 fp_rx_annotation = None;
                 fp_flags =
                 (make_fp_flags ~mutability:None ~accept_disposable:false
                   ~has_default:false ~mode:Typing_defs_core.FPnormal
                   ~ifc_external:false ~ifc_can_call:false ~is_atom:false
                   ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [6:10-13]) };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|wildcard_invalid.php line 6, characters 25-25),
                 Terr)
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false
                ~returns_readonly:false ~readonly_this:false);
              ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [6:10-13]; fe_php_std_lib = false }));
  ("\\C",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = true;
        sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
        sc_name = ([9:13-14], "\\C"); sc_tparams = [];
        sc_where_constraints = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
        sc_implements = []; sc_implements_dynamic = false; sc_consts = [];
        sc_typeconsts = [];
        sc_props =
        [{ Shallow_decl_defs.sp_name = ([10:41-45], "foo");
           sp_xhp_attr = None;
           sp_type =
           (Some (Rhint (root|wildcard_invalid.php line 10, characters 39-39),
                  Terr));
           sp_visibility = Private; sp_flags = needs_init }
          ];
        sc_sprops = [];
        sc_constructor =
        (Some { Shallow_decl_defs.sm_name = ([10:19-30], "__construct");
                sm_reactivity = None;
                sm_type =
                (Rwitness (root|wildcard_invalid.php line 10, characters 19-29),
                 (Tfun
                    { ft_arity = (Fstandard ()); ft_tparams = [];
                      ft_where_constraints = [];
                      ft_params =
                      [{ fp_pos = [10:41-45]; fp_name = (Some "$foo");
                         fp_type =
                         { et_enforced = false;
                           et_type =
                           (Rhint (root|wildcard_invalid.php line 10, characters 39-39),
                            Terr)
                           };
                         fp_rx_annotation = None;
                         fp_flags =
                         (make_fp_flags ~mutability:None
                           ~accept_disposable:false ~has_default:false
                           ~mode:Typing_defs_core.FPnormal
                           ~ifc_external:false ~ifc_can_call:false
                           ~is_atom:false ~readonly:false);
                          }
                        ];
                      ft_implicit_params =
                      { capability = (CapDefaults [10:19-30]) };
                      ft_ret =
                      { et_enforced = false;
                        et_type =
                        (Rwitness (root|wildcard_invalid.php line 10, characters 19-29),
                         (Tprim Tvoid))
                        };
                      ft_flags =
                      (make_ft_flags FSync None ~return_disposable:false
                        ~returns_mutable:false ~returns_void_to_rx:false
                        ~returns_readonly:false ~readonly_this:false);
                      ft_reactive = Nonreactive;
                      ft_ifc_decl = FDPolicied {PUBLIC} }));
                sm_visibility = Public; sm_deprecated = None;
                sm_flags = (empty) });
        sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
        sc_enum_type = None }))
  ]

They matched!
