[("\\A",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
       sc_name = ([3:7-8], "\\A"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
       sc_implements = []; sc_implements_dynamic = false; sc_consts = [];
       sc_typeconsts = []; sc_props = []; sc_sprops = [];
       sc_constructor = None; sc_static_methods = []; sc_methods = [];
       sc_user_attributes = []; sc_enum_type = None }));
  ("\\f",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|mutable.php line 6, characters 10-10),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [6:47-49]; fp_name = (Some "$a");
                 fp_type =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|mutable.php line 6, characters 12-45),
                    (Tfun
                       { ft_arity = (Fstandard ()); ft_tparams = [];
                         ft_where_constraints = [];
                         ft_params =
                         [{ fp_pos = [6:35-36]; fp_name = None;
                            fp_type =
                            { et_enforced = false;
                              et_type =
                              (Rhint (root|mutable.php line 6, characters 35-35),
                               (Tapply (([6:35-36], "\\A"), [])))
                              };
                            fp_rx_annotation = None;
                            fp_flags =
                            (make_fp_flags
                              ~mutability:(Some Typing_defs_core.Param_borrowed_mutable)
                              ~accept_disposable:false ~has_default:false
                              ~mode:Typing_defs_core.FPnormal
                              ~ifc_external:false ~ifc_can_call:false
                              ~is_atom:false ~readonly:false);
                             }
                           ];
                         ft_implicit_params =
                         { capability = (CapDefaults [6:12-46]) };
                         ft_ret =
                         { et_enforced = false;
                           et_type =
                           (Rhint (root|mutable.php line 6, characters 40-43),
                            (Tprim Tvoid))
                           };
                         ft_flags =
                         (make_ft_flags FSync None ~return_disposable:false
                           ~returns_mutable:false ~returns_void_to_rx:false
                           ~returns_readonly:false ~readonly_this:false);
                         ft_reactive = Pure {};
                         ft_ifc_decl = FDPolicied {PUBLIC} }))
                   };
                 fp_rx_annotation = None;
                 fp_flags =
                 (make_fp_flags ~mutability:None ~accept_disposable:false
                   ~has_default:false ~mode:Typing_defs_core.FPnormal
                   ~ifc_external:false ~ifc_can_call:false ~is_atom:false
                   ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [6:10-11]) };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|mutable.php line 6, characters 52-55),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false
                ~returns_readonly:false ~readonly_this:false);
              ft_reactive = Pure {}; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [6:10-11]; fe_php_std_lib = false }));
  ("\\g",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|mutable.php line 9, characters 10-10),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [9:52-54]; fp_name = (Some "$a");
                 fp_type =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|mutable.php line 9, characters 12-50),
                    (Tfun
                       { ft_arity = (Fstandard ()); ft_tparams = [];
                         ft_where_constraints = [];
                         ft_params =
                         [{ fp_pos = [9:40-41]; fp_name = None;
                            fp_type =
                            { et_enforced = false;
                              et_type =
                              (Rhint (root|mutable.php line 9, characters 40-40),
                               (Tapply (([9:40-41], "\\A"), [])))
                              };
                            fp_rx_annotation = None;
                            fp_flags =
                            (make_fp_flags
                              ~mutability:(Some Typing_defs_core.Param_maybe_mutable)
                              ~accept_disposable:false ~has_default:false
                              ~mode:Typing_defs_core.FPnormal
                              ~ifc_external:false ~ifc_can_call:false
                              ~is_atom:false ~readonly:false);
                             }
                           ];
                         ft_implicit_params =
                         { capability = (CapDefaults [9:12-51]) };
                         ft_ret =
                         { et_enforced = false;
                           et_type =
                           (Rhint (root|mutable.php line 9, characters 45-48),
                            (Tprim Tvoid))
                           };
                         ft_flags =
                         (make_ft_flags FSync None ~return_disposable:false
                           ~returns_mutable:false ~returns_void_to_rx:false
                           ~returns_readonly:false ~readonly_this:false);
                         ft_reactive = Pure {};
                         ft_ifc_decl = FDPolicied {PUBLIC} }))
                   };
                 fp_rx_annotation = None;
                 fp_flags =
                 (make_fp_flags ~mutability:None ~accept_disposable:false
                   ~has_default:false ~mode:Typing_defs_core.FPnormal
                   ~ifc_external:false ~ifc_can_call:false ~is_atom:false
                   ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [9:10-11]) };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|mutable.php line 9, characters 57-60),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false
                ~returns_readonly:false ~readonly_this:false);
              ft_reactive = Pure {}; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [9:10-11]; fe_php_std_lib = false }));
  ("\\h",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|mutable.php line 12, characters 10-10),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [12:52-54]; fp_name = (Some "$a");
                 fp_type =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|mutable.php line 12, characters 12-50),
                    (Tfun
                       { ft_arity = (Fstandard ()); ft_tparams = [];
                         ft_where_constraints = [];
                         ft_params =
                         [{ fp_pos = [12:40-41]; fp_name = None;
                            fp_type =
                            { et_enforced = false;
                              et_type =
                              (Rhint (root|mutable.php line 12, characters 40-40),
                               (Tapply (([12:40-41], "\\A"), [])))
                              };
                            fp_rx_annotation = None;
                            fp_flags =
                            (make_fp_flags
                              ~mutability:(Some Typing_defs_core.Param_owned_mutable)
                              ~accept_disposable:false ~has_default:false
                              ~mode:Typing_defs_core.FPnormal
                              ~ifc_external:false ~ifc_can_call:false
                              ~is_atom:false ~readonly:false);
                             }
                           ];
                         ft_implicit_params =
                         { capability = (CapDefaults [12:12-51]) };
                         ft_ret =
                         { et_enforced = false;
                           et_type =
                           (Rhint (root|mutable.php line 12, characters 45-48),
                            (Tprim Tvoid))
                           };
                         ft_flags =
                         (make_ft_flags FSync None ~return_disposable:false
                           ~returns_mutable:false ~returns_void_to_rx:false
                           ~returns_readonly:false ~readonly_this:false);
                         ft_reactive = Pure {};
                         ft_ifc_decl = FDPolicied {PUBLIC} }))
                   };
                 fp_rx_annotation = None;
                 fp_flags =
                 (make_fp_flags ~mutability:None ~accept_disposable:false
                   ~has_default:false ~mode:Typing_defs_core.FPnormal
                   ~ifc_external:false ~ifc_can_call:false ~is_atom:false
                   ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [12:10-11]) };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|mutable.php line 12, characters 57-60),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false
                ~returns_readonly:false ~readonly_this:false);
              ft_reactive = Pure {}; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [12:10-11]; fe_php_std_lib = false }));
  ("\\i",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|mutable.php line 15, characters 10-10),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [15:48-50]; fp_name = (Some "$a");
                 fp_type =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|mutable.php line 15, characters 12-46),
                    (Tfun
                       { ft_arity = (Fstandard ()); ft_tparams = [];
                         ft_where_constraints = []; ft_params = [];
                         ft_implicit_params =
                         { capability = (CapDefaults [15:12-47]) };
                         ft_ret =
                         { et_enforced = false;
                           et_type =
                           (Rhint (root|mutable.php line 15, characters 43-43),
                            (Tapply (([15:43-44], "\\A"), [])))
                           };
                         ft_flags =
                         (make_ft_flags FSync None ~return_disposable:false
                           ~returns_mutable:true ~returns_void_to_rx:false
                           ~returns_readonly:false ~readonly_this:false);
                         ft_reactive = Pure {};
                         ft_ifc_decl = FDPolicied {PUBLIC} }))
                   };
                 fp_rx_annotation = None;
                 fp_flags =
                 (make_fp_flags ~mutability:None ~accept_disposable:false
                   ~has_default:false ~mode:Typing_defs_core.FPnormal
                   ~ifc_external:false ~ifc_can_call:false ~is_atom:false
                   ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [15:10-11]) };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|mutable.php line 15, characters 53-56),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false
                ~returns_readonly:false ~readonly_this:false);
              ft_reactive = Pure {}; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [15:10-11]; fe_php_std_lib = false }))
  ]

They matched!
