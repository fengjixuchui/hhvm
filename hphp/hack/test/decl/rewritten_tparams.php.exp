[("\\f",
  (Shallow_decl_defs.Fun
     { Typing_defs.fe_deprecated = None;
       fe_type =
       (Rwitness_from_decl ([3:10-11]),
        (Tfun
           { ft_arity = (Fstandard ());
             ft_tparams =
             [{ Typing_defs_core.tp_variance = Invariant;
                tp_name = ([4:16-17], "Tctx$f"); tp_tparams = [];
                tp_constraints = []; tp_reified = Erased;
                tp_user_attributes = [] };
               { Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([5:12-14], "T$v"); tp_tparams = [];
                 tp_constraints =
                 [(Constraint_as,
                   (Rhint ([5:3-11]),
                    (Tapply (([5:3-6], "\\HH\\vec"),
                       [(Rhint ([5:7-10]), (Tprim Tint))]))))
                   ];
                 tp_reified = Erased; tp_user_attributes = [] };
               { Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([6:11-16], "T$v@C"); tp_tparams = [];
                 tp_constraints = []; tp_reified = Erased;
                 tp_user_attributes = [] }
               ];
             ft_where_constraints =
             [((Rhint ([6:11-16]), (Tgeneric ("T$v@C", []))), Constraint_eq,
               (Rhint ([6:11-16]),
                (Taccess
                   ((Rhint ([6:11-16]), (Tgeneric ("T$v", []))),
                    [([6:15-16], "C")]))))
               ];
             ft_params =
             [{ fp_pos = [4:26-28]; fp_name = (Some "$f");
                fp_type =
                { et_enforced = Typing_defs_core.Unenforced;
                  et_type =
                  (Rhint ([4:3-25]),
                   (Tfun
                      { ft_arity = (Fstandard ()); ft_tparams = [];
                        ft_where_constraints = []; ft_params = [];
                        ft_implicit_params =
                        { capability =
                          (CapTy (Rhint ([4:16-17]),
                                  (Tgeneric ("Tctx$f", []))))
                          };
                        ft_ret =
                        { et_enforced = Typing_defs_core.Unenforced;
                          et_type = (Rhint ([4:20-24]), (Tprim Tvoid)) };
                        ft_flags =
                        (make_ft_flags FSync ~return_disposable:false
                          ~returns_readonly:false ~readonly_this:false);
                        ft_ifc_decl = FDPolicied {PUBLIC} }))
                  };
                fp_flags =
                (make_fp_flags ~accept_disposable:false ~has_default:false
                  ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                  ~ifc_can_call:false ~is_atom:false ~readonly:false);
                 };
               { fp_pos = [5:12-14]; fp_name = (Some "$v");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type = (Rhint ([5:12-14]), (Tgeneric ("T$v", []))) };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~is_atom:false ~readonly:false);
                  }
               ];
             ft_implicit_params =
             { capability =
               (CapTy (Rhint ([6:2-17]),
                       (Tintersection
                          [(Rhint ([6:3-9]), (Tgeneric ("Tctx$f", [])));
                            (Rhint ([6:11-16]), (Tgeneric ("T$v@C", [])))])))
               };
             ft_ret =
             { et_enforced = Typing_defs_core.Unenforced;
               et_type = (Rhint ([6:19-23]), (Tprim Tvoid)) };
             ft_flags =
             (make_ft_flags FSync ~return_disposable:false
               ~returns_readonly:false ~readonly_this:false);
             ft_ifc_decl = FDPolicied {PUBLIC} }));
       fe_pos = [3:10-11]; fe_php_std_lib = false }));
  ("\\g",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness_from_decl ([10:10-11]),
         (Tfun
            { ft_arity = (Fstandard ());
              ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([10:21-23], "T$v"); tp_tparams = [];
                 tp_constraints =
                 [(Constraint_as,
                   (Rhint ([10:12-20]),
                    (Tapply (([10:12-15], "\\HH\\vec"),
                       [(Rhint ([10:16-19]), (Tprim Tint))]))))
                   ];
                 tp_reified = Erased; tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([10:25-30], "T$v@C"); tp_tparams = [];
                  tp_constraints = []; tp_reified = Erased;
                  tp_user_attributes = [] }
                ];
              ft_where_constraints =
              [((Rhint ([10:25-30]), (Tgeneric ("T$v@C", []))),
                Constraint_eq,
                (Rhint ([10:25-30]),
                 (Taccess
                    ((Rhint ([10:25-30]), (Tgeneric ("T$v", []))),
                     [([10:29-30], "C")]))))
                ];
              ft_params =
              [{ fp_pos = [10:21-23]; fp_name = (Some "$v");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type = (Rhint ([10:21-23]), (Tgeneric ("T$v", []))) };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~is_atom:false ~readonly:false);
                  }
                ];
              ft_implicit_params =
              { capability =
                (CapTy (Rhint ([10:25-30]), (Tgeneric ("T$v@C", [])))) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([10:33-36]), (Tprim Tint)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [10:10-11]; fe_php_std_lib = false }));
  ("\\h",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness_from_decl ([14:10-11]),
         (Tfun
            { ft_arity = (Fstandard ());
              ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([15:17-18], "Tctx$f"); tp_tparams = [];
                 tp_constraints = []; tp_reified = Erased;
                 tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([16:13-15], "T$v"); tp_tparams = [];
                  tp_constraints =
                  [(Constraint_as,
                    (Rhint ([16:4-12]),
                     (Tapply (([16:4-7], "\\HH\\vec"),
                        [(Rhint ([16:8-11]), (Tprim Tint))]))))
                    ];
                  tp_reified = Erased; tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([17:11-16], "T$v@C"); tp_tparams = [];
                  tp_constraints = []; tp_reified = Erased;
                  tp_user_attributes = [] }
                ];
              ft_where_constraints =
              [((Rhint ([17:11-16]), (Tgeneric ("T$v@C", []))),
                Constraint_eq,
                (Rhint ([17:11-16]),
                 (Taccess
                    ((Rhint ([17:11-16]), (Tgeneric ("T$v", []))),
                     [([17:15-16], "C")]))))
                ];
              ft_params =
              [{ fp_pos = [15:27-29]; fp_name = (Some "$f");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([15:3-26]),
                    (Toption
                       (Rhint ([15:4-26]),
                        (Tfun
                           { ft_arity = (Fstandard ()); ft_tparams = [];
                             ft_where_constraints = []; ft_params = [];
                             ft_implicit_params =
                             { capability =
                               (CapTy (Rhint ([15:17-18]),
                                       (Tgeneric ("Tctx$f", []))))
                               };
                             ft_ret =
                             { et_enforced = Typing_defs_core.Unenforced;
                               et_type = (Rhint ([15:21-25]), (Tprim Tvoid))
                               };
                             ft_flags =
                             (make_ft_flags FSync ~return_disposable:false
                               ~returns_readonly:false ~readonly_this:false);
                             ft_ifc_decl = FDPolicied {PUBLIC} }))))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~is_atom:false ~readonly:false);
                  };
                { fp_pos = [16:13-15]; fp_name = (Some "$v");
                  fp_type =
                  { et_enforced = Typing_defs_core.Unenforced;
                    et_type =
                    (Rhint ([16:3-12]),
                     (Toption (Rhint ([16:13-15]), (Tgeneric ("T$v", [])))))
                    };
                  fp_flags =
                  (make_fp_flags ~accept_disposable:false ~has_default:false
                    ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                    ~ifc_can_call:false ~is_atom:false ~readonly:false);
                   }
                ];
              ft_implicit_params =
              { capability =
                (CapTy (Rhint ([17:2-17]),
                        (Tintersection
                           [(Rhint ([17:3-9]), (Tgeneric ("Tctx$f", [])));
                             (Rhint ([17:11-16]), (Tgeneric ("T$v@C", [])))])))
                };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([17:19-23]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [14:10-11]; fe_php_std_lib = false }))
  ]

They matched!
