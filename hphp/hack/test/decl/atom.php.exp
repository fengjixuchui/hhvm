[("\\EE",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cenum;
       sc_name = ([8:12-14], "\\EE"); sc_tparams = [];
       sc_where_constraints = [];
       sc_extends =
       [(Rhint (root|atom.php line 8, characters 12-13),
         (Tapply (([8:12-14], "\\HH\\BuiltinEnumClass"),
            [(Rhint (root|atom.php line 8, characters 12-13),
              (Tapply (([8:12-14], "\\HH\\MemberOf"),
                 [(Rhint (root|atom.php line 8, characters 12-13),
                   (Tapply (([8:12-14], "\\EE"), [])));
                   (Rhint (root|atom.php line 8, characters 17-17),
                    (Tapply (([8:17-18], "\\I"), [])))
                   ]
                 )))
              ]
            )))
         ];
       sc_uses = []; sc_xhp_attr_uses = []; sc_req_extends = [];
       sc_req_implements = []; sc_implements = [];
       sc_implements_dynamic = false;
       sc_consts =
       [{ Shallow_decl_defs.scc_abstract = false; scc_name = ([9:7-8], "A");
          scc_type =
          (Rhint (root|atom.php line 9, characters 7-7),
           (Tapply (([9:7-8], "\\HH\\MemberOf"),
              [(Rhint (root|atom.php line 9, characters 7-7),
                (Tapply (([9:7-8], "\\EE"), [])));
                (Rhint (root|atom.php line 9, characters 3-5),
                 (Tapply (([9:3-6], "\\Box"), [])))
                ]
              )))
          }
         ];
       sc_typeconsts = []; sc_props = []; sc_sprops = [];
       sc_constructor = None; sc_static_methods = []; sc_methods = [];
       sc_user_attributes =
       [{ Typing_defs_core.ua_name = ([8:12-14], "__EnumClass");
          ua_classname_params = [] }
         ];
       sc_enum_type =
       (Some { Typing_defs.te_base =
               (Rhint (root|atom.php line 8, characters 17-17),
                (Tapply (([8:17-18], "\\I"), [])));
               te_constraint = None; te_includes = []; te_enum_class = true })
       }));
  ("\\FF",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cenum;
        sc_name = ([12:12-14], "\\FF"); sc_tparams = [];
        sc_where_constraints = [];
        sc_extends =
        [(Rhint (root|atom.php line 12, characters 12-13),
          (Tapply (([12:12-14], "\\HH\\BuiltinEnumClass"),
             [(Rhint (root|atom.php line 12, characters 12-13),
               (Tapply (([12:12-14], "\\HH\\MemberOf"),
                  [(Rhint (root|atom.php line 12, characters 12-13),
                    (Tapply (([12:12-14], "\\FF"), [])));
                    (Rhint (root|atom.php line 12, characters 17-17),
                     (Tapply (([12:17-18], "\\I"), [])))
                    ]
                  )))
               ]
             )));
          (Rhint (root|atom.php line 12, characters 27-28),
           (Tapply (([12:27-29], "\\EE"), [])))
          ];
        sc_uses = []; sc_xhp_attr_uses = []; sc_req_extends = [];
        sc_req_implements = []; sc_implements = [];
        sc_implements_dynamic = false;
        sc_consts =
        [{ Shallow_decl_defs.scc_abstract = false;
           scc_name = ([13:7-8], "C");
           scc_type =
           (Rhint (root|atom.php line 13, characters 7-7),
            (Tapply (([13:7-8], "\\HH\\MemberOf"),
               [(Rhint (root|atom.php line 13, characters 7-7),
                 (Tapply (([13:7-8], "\\FF"), [])));
                 (Rhint (root|atom.php line 13, characters 3-5),
                  (Tapply (([13:3-6], "\\Box"), [])))
                 ]
               )))
           }
          ];
        sc_typeconsts = []; sc_props = []; sc_sprops = [];
        sc_constructor = None; sc_static_methods = []; sc_methods = [];
        sc_user_attributes =
        [{ Typing_defs_core.ua_name = ([12:12-14], "__EnumClass");
           ua_classname_params = [] }
          ];
        sc_enum_type =
        (Some { Typing_defs.te_base =
                (Rhint (root|atom.php line 12, characters 17-17),
                 (Tapply (([12:17-18], "\\I"), [])));
                te_constraint = None;
                te_includes =
                [(Rhint (root|atom.php line 12, characters 27-28),
                  (Tapply (([12:27-29], "\\EE"), [])))];
                te_enum_class = true })
        }));
  ("\\Foo",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cenum;
        sc_name = ([16:12-15], "\\Foo"); sc_tparams = [];
        sc_where_constraints = [];
        sc_extends =
        [(Rhint (root|atom.php line 16, characters 12-14),
          (Tapply (([16:12-15], "\\HH\\BuiltinEnumClass"),
             [(Rhint (root|atom.php line 16, characters 12-14),
               (Tapply (([16:12-15], "\\HH\\MemberOf"),
                  [(Rhint (root|atom.php line 16, characters 12-14),
                    (Tapply (([16:12-15], "\\Foo"), [])));
                    (Rhint (root|atom.php line 16, characters 17-21), Tmixed)
                    ]
                  )))
               ]
             )))
          ];
        sc_uses = []; sc_xhp_attr_uses = []; sc_req_extends = [];
        sc_req_implements = []; sc_implements = [];
        sc_implements_dynamic = false;
        sc_consts =
        [{ Shallow_decl_defs.scc_abstract = false;
           scc_name = ([17:16-19], "Str");
           scc_type =
           (Rhint (root|atom.php line 17, characters 16-18),
            (Tapply (([17:16-19], "\\HH\\MemberOf"),
               [(Rhint (root|atom.php line 17, characters 16-18),
                 (Tapply (([17:16-19], "\\Foo"), [])));
                 (Rhint (root|atom.php line 17, characters 4-14),
                  (Tapply (([17:4-7], "\\Box"),
                     [(Rhint (root|atom.php line 17, characters 8-13),
                       (Tprim Tstring))]
                     )))
                 ]
               )))
           }
          ];
        sc_typeconsts = []; sc_props = []; sc_sprops = [];
        sc_constructor = None; sc_static_methods = []; sc_methods = [];
        sc_user_attributes =
        [{ Typing_defs_core.ua_name = ([16:12-15], "__EnumClass");
           ua_classname_params = [] }
          ];
        sc_enum_type =
        (Some { Typing_defs.te_base =
                (Rhint (root|atom.php line 16, characters 17-21), Tmixed);
                te_constraint = None; te_includes = []; te_enum_class = true
                })
        }));
  ("\\ff",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|atom.php line 20, characters 10-11),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [20:45-47]; fp_name = (Some "$x");
                 fp_type =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|atom.php line 20, characters 24-43),
                    (Tapply (([20:24-35], "\\HH\\MemberOf"),
                       [(Rhint (root|atom.php line 20, characters 36-37),
                         (Tapply (([20:36-38], "\\EE"), [])));
                         (Rhint (root|atom.php line 20, characters 40-42),
                          (Tapply (([20:40-43], "\\Box"), [])))
                         ]
                       )))
                   };
                 fp_rx_annotation = None;
                 fp_flags =
                 (make_fp_flags ~mutability:None ~accept_disposable:false
                   ~has_default:false ~mode:Typing_defs_core.FPnormal
                   ~ifc_external:false ~ifc_can_call:false ~is_atom:true);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [20:10-12]) };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|atom.php line 20, characters 51-53),
                 (Tprim Tint))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false);
              ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [20:10-12]; fe_php_std_lib = false }))
  ]

They matched!
