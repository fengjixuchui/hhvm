[("\\expect_int",
  (Shallow_decl_defs.Fun
     { Typing_defs.fe_deprecated = None;
       fe_type =
       (Rwitness (root|like_types.php line 4, characters 10-19),
        (Tfun
           { ft_arity = (Fstandard ()); ft_tparams = [];
             ft_where_constraints = [];
             ft_params =
             [{ fp_pos = [4:25-27]; fp_name = (Some "$i");
                fp_type =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|like_types.php line 4, characters 21-23),
                   (Tprim Tint))
                  };
                fp_rx_annotation = None;
                fp_flags =
                (make_fp_flags ~mutability:None ~accept_disposable:false
                  ~has_default:false ~mode:Typing_defs_core.FPnormal
                  ~ifc_external:false ~ifc_can_call:false ~is_atom:false);
                 }
               ];
             ft_implicit_params = { capability = (CapDefaults [4:10-20]) };
             ft_ret =
             { et_enforced = false;
               et_type =
               (Rhint (root|like_types.php line 4, characters 30-33),
                (Tprim Tvoid))
               };
             ft_flags =
             (make_ft_flags FSync None ~return_disposable:false
               ~returns_mutable:false ~returns_void_to_rx:false);
             ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
       fe_pos = [4:10-20]; fe_php_std_lib = false }));
  ("\\f",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|like_types.php line 6, characters 10-10),
         (Tfun
            { ft_arity = (Fstandard ());
              ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([6:12-13], "T"); tp_tparams = [];
                 tp_constraints =
                 [(Constraint_as,
                   (Rhint (root|like_types.php line 6, characters 17-20),
                    (Tlike
                       (Rhint (root|like_types.php line 6, characters 18-20),
                        (Tprim Tint)))))
                   ];
                 tp_reified = Erased; tp_user_attributes = [] }
                ];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [6:25-27]; fp_name = (Some "$t");
                 fp_type =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|like_types.php line 6, characters 23-23),
                    (Tgeneric ("T", [])))
                   };
                 fp_rx_annotation = None;
                 fp_flags =
                 (make_fp_flags ~mutability:None ~accept_disposable:false
                   ~has_default:false ~mode:Typing_defs_core.FPnormal
                   ~ifc_external:false ~ifc_can_call:false ~is_atom:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [6:10-11]) };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|like_types.php line 6, characters 30-33),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false);
              ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [6:10-11]; fe_php_std_lib = false }));
  ("\\X",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cabstract;
        sc_name = ([10:16-17], "\\X"); sc_tparams = [];
        sc_where_constraints = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
        sc_implements = []; sc_implements_dynamic = false; sc_consts = [];
        sc_typeconsts =
        [{ Shallow_decl_defs.stc_abstract = (Typing_defs.TCAbstract None);
           stc_constraint =
           (Some (Rhint (root|like_types.php line 11, characters 28-31),
                  (Tlike
                     (Rhint (root|like_types.php line 11, characters 29-31),
                      (Tprim Tint)))));
           stc_name = ([11:23-24], "T"); stc_type = None;
           stc_enforceable = ([Pos.none], false); stc_reifiable = None }
          ];
        sc_props = []; sc_sprops = []; sc_constructor = None;
        sc_static_methods = [];
        sc_methods =
        [{ Shallow_decl_defs.sm_name = ([13:19-20], "f");
           sm_reactivity = None;
           sm_type =
           (Rwitness (root|like_types.php line 13, characters 19-19),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = [];
                 ft_params =
                 [{ fp_pos = [13:29-31]; fp_name = (Some "$t");
                    fp_type =
                    { et_enforced = false;
                      et_type =
                      (Rhint (root|like_types.php line 13, characters 21-27),
                       (Taccess
                          ((Rhint (root|like_types.php line 13, characters 21-27),
                            Tthis),
                           [([13:27-28], "T")])))
                      };
                    fp_rx_annotation = None;
                    fp_flags =
                    (make_fp_flags ~mutability:None ~accept_disposable:false
                      ~has_default:false ~mode:Typing_defs_core.FPnormal
                      ~ifc_external:false ~ifc_can_call:false ~is_atom:false);
                     }
                   ];
                 ft_implicit_params =
                 { capability = (CapDefaults [13:19-20]) };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|like_types.php line 13, characters 34-37),
                    (Tprim Tvoid))
                   };
                 ft_flags =
                 (make_ft_flags FSync None ~return_disposable:false
                   ~returns_mutable:false ~returns_void_to_rx:false);
                 ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC}
                 }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) }
          ];
        sc_user_attributes = []; sc_enum_type = None }))
  ]

They matched!
