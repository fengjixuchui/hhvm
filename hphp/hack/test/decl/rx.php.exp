[("\\C",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
       sc_name = ([3:7-8], "\\C"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
       sc_implements = []; sc_implements_dynamic = false; sc_consts = [];
       sc_typeconsts = []; sc_props = []; sc_sprops = [];
       sc_constructor = None; sc_static_methods = [];
       sc_methods =
       [{ Shallow_decl_defs.sm_name = ([5:19-21], "f1");
          sm_reactivity = (Some (Decl_defs.Method_reactive None));
          sm_type =
          (Rwitness (root|rx.php line 5, characters 19-20),
           (Tfun
              { ft_arity = (Fstandard ()); ft_tparams = [];
                ft_where_constraints = [];
                ft_params =
                [{ fp_pos = [5:46-48]; fp_name = (Some "$f");
                   fp_type =
                   { et_enforced = false;
                     et_type =
                     (Rhint (root|rx.php line 5, characters 22-44),
                      (Tfun
                         { ft_arity = (Fstandard ()); ft_tparams = [];
                           ft_where_constraints = []; ft_params = [];
                           ft_implicit_params =
                           { capability = (CapDefaults [5:22-45]) };
                           ft_ret =
                           { et_enforced = false;
                             et_type =
                             (Rhint (root|rx.php line 5, characters 40-42),
                              (Tprim Tint))
                             };
                           ft_flags =
                           (make_ft_flags FSync None ~return_disposable:false
                             ~returns_mutable:false
                             ~returns_void_to_rx:false);
                           ft_reactive = Pure {};
                           ft_ifc_decl = FDPolicied {PUBLIC} }))
                     };
                   fp_rx_annotation = None;
                   fp_flags =
                   (make_fp_flags ~mutability:None ~accept_disposable:false
                     ~has_default:false ~mode:Typing_defs_core.FPnormal
                     ~ifc_external:false ~ifc_can_call:false ~is_atom:false);
                    }
                  ];
                ft_implicit_params = { capability = (CapDefaults [5:19-21]) };
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|rx.php line 5, characters 51-54),
                   (Tprim Tvoid))
                  };
                ft_flags =
                (make_ft_flags FSync None ~return_disposable:false
                  ~returns_mutable:false ~returns_void_to_rx:false);
                ft_reactive = Reactive {}; ft_ifc_decl = FDPolicied {PUBLIC}
                }));
          sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) };
         { Shallow_decl_defs.sm_name = ([7:19-21], "f2");
           sm_reactivity = (Some (Decl_defs.Method_reactive None));
           sm_type =
           (Rwitness (root|rx.php line 7, characters 19-20),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = [];
                 ft_params =
                 [{ fp_pos = [7:44-46]; fp_name = (Some "$f");
                    fp_type =
                    { et_enforced = false;
                      et_type =
                      (Rhint (root|rx.php line 7, characters 22-42),
                       (Tfun
                          { ft_arity = (Fstandard ()); ft_tparams = [];
                            ft_where_constraints = []; ft_params = [];
                            ft_implicit_params =
                            { capability = (CapDefaults [7:22-43]) };
                            ft_ret =
                            { et_enforced = false;
                              et_type =
                              (Rhint (root|rx.php line 7, characters 38-40),
                               (Tprim Tint))
                              };
                            ft_flags =
                            (make_ft_flags FSync None
                              ~return_disposable:false ~returns_mutable:false
                              ~returns_void_to_rx:false);
                            ft_reactive = Reactive {};
                            ft_ifc_decl = FDPolicied {PUBLIC} }))
                      };
                    fp_rx_annotation = None;
                    fp_flags =
                    (make_fp_flags ~mutability:None ~accept_disposable:false
                      ~has_default:false ~mode:Typing_defs_core.FPnormal
                      ~ifc_external:false ~ifc_can_call:false ~is_atom:false);
                     }
                   ];
                 ft_implicit_params =
                 { capability = (CapDefaults [7:19-21]) };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|rx.php line 7, characters 49-52),
                    (Tprim Tvoid))
                   };
                 ft_flags =
                 (make_ft_flags FSync None ~return_disposable:false
                   ~returns_mutable:false ~returns_void_to_rx:false);
                 ft_reactive = Reactive {}; ft_ifc_decl = FDPolicied {PUBLIC}
                 }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) };
         { Shallow_decl_defs.sm_name = ([9:19-21], "f3");
           sm_reactivity = (Some (Decl_defs.Method_reactive None));
           sm_type =
           (Rwitness (root|rx.php line 9, characters 19-20),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = [];
                 ft_params =
                 [{ fp_pos = [9:51-53]; fp_name = (Some "$f");
                    fp_type =
                    { et_enforced = false;
                      et_type =
                      (Rhint (root|rx.php line 9, characters 22-49),
                       (Tfun
                          { ft_arity = (Fstandard ()); ft_tparams = [];
                            ft_where_constraints = []; ft_params = [];
                            ft_implicit_params =
                            { capability = (CapDefaults [9:22-50]) };
                            ft_ret =
                            { et_enforced = false;
                              et_type =
                              (Rhint (root|rx.php line 9, characters 45-47),
                               (Tprim Tint))
                              };
                            ft_flags =
                            (make_ft_flags FSync None
                              ~return_disposable:false ~returns_mutable:false
                              ~returns_void_to_rx:false);
                            ft_reactive = Shallow {};
                            ft_ifc_decl = FDPolicied {PUBLIC} }))
                      };
                    fp_rx_annotation = None;
                    fp_flags =
                    (make_fp_flags ~mutability:None ~accept_disposable:false
                      ~has_default:false ~mode:Typing_defs_core.FPnormal
                      ~ifc_external:false ~ifc_can_call:false ~is_atom:false);
                     }
                   ];
                 ft_implicit_params =
                 { capability = (CapDefaults [9:19-21]) };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|rx.php line 9, characters 56-59),
                    (Tprim Tvoid))
                   };
                 ft_flags =
                 (make_ft_flags FSync None ~return_disposable:false
                   ~returns_mutable:false ~returns_void_to_rx:false);
                 ft_reactive = Reactive {}; ft_ifc_decl = FDPolicied {PUBLIC}
                 }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) };
         { Shallow_decl_defs.sm_name = ([11:19-21], "f4");
           sm_reactivity = (Some (Decl_defs.Method_reactive None));
           sm_type =
           (Rwitness (root|rx.php line 11, characters 19-20),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = [];
                 ft_params =
                 [{ fp_pos = [11:49-51]; fp_name = (Some "$f");
                    fp_type =
                    { et_enforced = false;
                      et_type =
                      (Rhint (root|rx.php line 11, characters 22-47),
                       (Tfun
                          { ft_arity = (Fstandard ()); ft_tparams = [];
                            ft_where_constraints = []; ft_params = [];
                            ft_implicit_params =
                            { capability = (CapDefaults [11:22-48]) };
                            ft_ret =
                            { et_enforced = false;
                              et_type =
                              (Rhint (root|rx.php line 11, characters 43-45),
                               (Tprim Tint))
                              };
                            ft_flags =
                            (make_ft_flags FSync None
                              ~return_disposable:false ~returns_mutable:false
                              ~returns_void_to_rx:false);
                            ft_reactive = Local {};
                            ft_ifc_decl = FDPolicied {PUBLIC} }))
                      };
                    fp_rx_annotation = None;
                    fp_flags =
                    (make_fp_flags ~mutability:None ~accept_disposable:false
                      ~has_default:false ~mode:Typing_defs_core.FPnormal
                      ~ifc_external:false ~ifc_can_call:false ~is_atom:false);
                     }
                   ];
                 ft_implicit_params =
                 { capability = (CapDefaults [11:19-21]) };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|rx.php line 11, characters 54-57),
                    (Tprim Tvoid))
                   };
                 ft_flags =
                 (make_ft_flags FSync None ~return_disposable:false
                   ~returns_mutable:false ~returns_void_to_rx:false);
                 ft_reactive = Reactive {}; ft_ifc_decl = FDPolicied {PUBLIC}
                 }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) }
         ];
       sc_user_attributes = []; sc_enum_type = None }))
  ]

They matched!
